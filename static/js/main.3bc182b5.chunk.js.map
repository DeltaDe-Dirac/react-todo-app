{"version":3,"sources":["components/ToDoInput/ToDoInput.js","components/ToDoList/ToDoList.js","components/ToDoTabs/ToDoTabs.js","model/TodoModel.js","pages/ToDoPage/ToDoPage.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoInput","addNewTodo","formRef","createRef","className","InputGroup","size","Prepend","Text","id","FormControl","aria-label","aria-describedby","placeholder","ref","onKeyPress","e","target","value","charCode","current","handleKeyPressed","ToDoList","todoList","toggleTodo","filter","removeTodo","useState","toBeRemoved","setToBeRemoved","ListGroup","variant","todo","isCompleted","map","Item","onMouseOver","mouseOverNode","nodeName","split","relTargetInput","relatedTarget","htmlFor","findID","icon","faTimes","onClick","type","onChange","checked","concat","text","uuidv4","ToDoTabs","applyFilter","Nav","defaultActiveKey","onSelect","selectedKey","Link","eventKey","Badge","length","TodoModel","this","ToDoPage","todos","setTodos","setFilter","showModal","setShowModal","todoIndexToBeRemoved","removeTodoByIndex","splice","getIndexById","todoId","i","console","error","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","Container","todoIndex","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bc182b5.chunk.js","sourcesContent":["import { createRef } from \"react\";\r\nimport \"./ToDoInput.css\";\r\nimport { InputGroup, FormControl } from \"react-bootstrap\";\r\n\r\nexport default function ToDoInput({ addNewTodo }) {\r\n  const formRef = createRef();\r\n\r\n  function handleKeyPressed(e) {\r\n    if (e.target.value && e.charCode === 13) {\r\n      addNewTodo(e.target.value);\r\n      formRef.current.value = \"\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"Todo-title text-center\">My List of ToDos</h1>\r\n      <InputGroup className=\"Todo-input\" size=\"lg\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text id=\"inputGroup-sizing-lg\">New ToDo</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl\r\n          aria-label=\"Large\"\r\n          aria-describedby=\"inputGroup-sizing-sm\"\r\n          placeholder=\"What's Next?\"\r\n          ref={formRef}\r\n          onKeyPress={(e) => handleKeyPressed(e)}\r\n        />\r\n      </InputGroup>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./ToDoList.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function ToDoList({ todoList, toggleTodo, filter, removeTodo }) {\r\n  const [toBeRemoved, setToBeRemoved] = useState(null);\r\n\r\n  function findID(e) {\r\n    // console.log(e);\r\n    let id = null;\r\n    const mouseOverNode = e.target;\r\n    if (mouseOverNode.nodeName === \"DIV\") {\r\n      if (mouseOverNode.id.split(\";\")[1]) {\r\n        id = mouseOverNode.id.split(\";\")[1];\r\n        // console.log(\"found DIV ID:\", mouseOverNode.id.split(\";\")[1]);\r\n      } else {\r\n        const relTargetInput = e.relatedTarget;\r\n        if (relTargetInput.nodeName === \"DIV\") {\r\n          id = relTargetInput.id.split(\";\")[1];\r\n          // console.log(\"found DIV related DIV ID:\", relTargetInput.id.split(\";\")[1]);\r\n        } else if (relTargetInput.nodeName === \"INPUT\") {\r\n          id = relTargetInput.id;\r\n          // console.log(\"found DIV related INPUT ID:\", relTargetInput.id);\r\n        } else if (relTargetInput.nodeName === \"LABEL\") {\r\n          id = relTargetInput.htmlFor;\r\n          // console.log(\"found DIV related LABEL HTMLFOR:\", relTargetInput.htmlFor);\r\n        }\r\n      }\r\n    } else if (mouseOverNode.nodeName === \"INPUT\") {\r\n      id = mouseOverNode.id;\r\n      // console.log(\"found INPUT ID:\", mouseOverNode.id);\r\n    } else if (mouseOverNode.nodeName === \"LABEL\") {\r\n      id = mouseOverNode.htmlFor;\r\n      // console.log(\"found LABEL HTMLFOR:\", mouseOverNode.htmlFor);\r\n    } else if (mouseOverNode.nodeName === \"svg\") {\r\n      // console.log(\"SVG\", toBeRemoved);\r\n      id = toBeRemoved;\r\n    } else {\r\n      // console.log(\"not found\", e);\r\n      id = toBeRemoved;\r\n    }\r\n\r\n    return id;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ListGroup variant=\"flush\" className=\"Todo-list\">\r\n        {todoList\r\n          .filter((todo) => (filter === \"all\" ? true : filter === \"active\" ? !todo.isCompleted : todo.isCompleted))\r\n          .map((todo) => (\r\n            <ListGroup.Item\r\n              variant=\"dark\"\r\n              key={uuidv4()}\r\n              id={`lgItem;${todo.id}`}\r\n              onMouseOver={(e) => setToBeRemoved(findID(e))}\r\n            >\r\n              {toBeRemoved === todo.id ? (\r\n                <FontAwesomeIcon className=\"showIcon\" icon={faTimes} onClick={() => removeTodo(toBeRemoved)} />\r\n              ) : (\r\n                <FontAwesomeIcon className=\"hideIcon\" icon={faTimes} onClick={() => removeTodo(toBeRemoved)} />\r\n              )}\r\n              <div className=\"form-check form-switch\">\r\n                <input\r\n                  className=\"form-check-input\"\r\n                  type=\"checkbox\"\r\n                  id={todo.id}\r\n                  onChange={(e) => toggleTodo(e.target.id)}\r\n                  checked={todo.isCompleted}\r\n                ></input>\r\n\r\n                <label className={\"form-check-label \".concat(todo.isCompleted ? \"completed\" : \"\")} htmlFor={todo.id}>\r\n                  {todo.text}\r\n                </label>\r\n              </div>\r\n            </ListGroup.Item>\r\n          ))}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./ToDoTabs.css\";\r\nimport { Nav, Badge } from \"react-bootstrap\";\r\n\r\nexport default function ToDoTabs({ todoList, applyFilter }) {\r\n  return (\r\n    <div className=\"Todo-tabs\">\r\n      <Nav variant=\"tabs\" defaultActiveKey=\"all\" onSelect={(selectedKey) => applyFilter(selectedKey)}>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"all\">\r\n            All <Badge variant=\"info\">{todoList.length}</Badge>\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"active\">\r\n            Active <Badge variant=\"danger\">{todoList.filter((todo) => !todo.isCompleted).length}</Badge>\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"completed\">\r\n            Completed <Badge variant=\"warning\">{todoList.filter((todo) => todo.isCompleted).length}</Badge>\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n    </div>\r\n  );\r\n}\r\n","export default class TodoModel {\r\n  constructor(id, text, isCompleted) {\r\n    this.id = id;\r\n    this.text = text;\r\n    this.isCompleted = isCompleted;\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./ToDoPage.css\";\r\nimport { Container, Button, Modal } from \"react-bootstrap\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport ToDoInput from \"../../components/ToDoInput/ToDoInput\";\r\nimport ToDoList from \"../../components/ToDoList/ToDoList\";\r\nimport ToDoTabs from \"../../components/ToDoTabs/ToDoTabs\";\r\nimport TodoModel from \"../../model/TodoModel\";\r\n\r\nexport default function ToDoPage() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  let todoIndexToBeRemoved = -1;\r\n\r\n  useEffect(() => {\r\n    const todos = JSON.parse(localStorage.getItem(\"todos\"));\r\n    if (todos) {\r\n      setTodos(todos);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  function addNewTodo(todo) {\r\n    setTodos(todos.concat(new TodoModel(uuidv4(), todo, false)));\r\n  }\r\n\r\n  function toggleTodo(todoId) {\r\n    const todoIndex = getIndexById(todoId);\r\n\r\n    if (todoIndex === -1) {\r\n      return;\r\n    }\r\n\r\n    todos[todoIndex].isCompleted = !todos[todoIndex].isCompleted;\r\n    setTodos([...todos]);\r\n  }\r\n\r\n  function removeTodo(todoId) {\r\n    todoIndexToBeRemoved = getIndexById(todoId);\r\n\r\n    if (todoIndexToBeRemoved === -1) {\r\n      return;\r\n    }\r\n\r\n    if (todos[todoIndexToBeRemoved].isCompleted) {\r\n      removeTodoByIndex();\r\n    } else {\r\n      setShowModal(true);\r\n    }\r\n  }\r\n\r\n  function removeTodoByIndex() {\r\n    todos.splice(todoIndexToBeRemoved, 1);\r\n    setTodos([...todos]);\r\n    setShowModal(false);\r\n  }\r\n\r\n  function getIndexById(todoId) {\r\n    let i = 0;\r\n\r\n    for (i = 0; i < todos.length; i++) {\r\n      if (todos[i].id === todoId) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    console.error(\"can't find ToDo by ID: \", todoId);\r\n    return -1;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Todo-page\">\r\n      <Container>\r\n        <div className=\"Todo-page-input\">\r\n          <ToDoInput addNewTodo={addNewTodo} />\r\n        </div>\r\n        <div className=\"Todo-page-tabs\">\r\n          <ToDoTabs todoList={todos} applyFilter={setFilter} />\r\n        </div>\r\n        <div className=\"Todo-page-list\">\r\n          <ToDoList todoList={todos} toggleTodo={toggleTodo} filter={filter} removeTodo={removeTodo} />\r\n        </div>\r\n        <Modal show={showModal} onHide={setShowModal}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Delete Incomplete ToDo</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>Are you sure you want to remove this item?</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"danger\" onClick={() => removeTodoByIndex()}>\r\n              Delete\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={() => setShowModal(false)}>\r\n              Oh, No!\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport ToDoPage from \"./pages/ToDoPage/ToDoPage\";\r\n// import ReactLogo from \"./components/ReactLogo/ReactLogo\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ToDoPage />\r\n      {/* <ReactLogo /> */}\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}