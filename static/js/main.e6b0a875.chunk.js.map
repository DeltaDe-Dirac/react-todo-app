{"version":3,"sources":["components/ToDoInput/ToDoInput.js","components/ToDoList/ToDoList.js","components/ToDoTabs/ToDoTabs.js","model/TodoModel.js","pages/ToDoPage/ToDoPage.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoInput","addNewTodo","formRef","createRef","className","InputGroup","size","Prepend","Text","id","FormControl","aria-label","aria-describedby","placeholder","ref","onKeyPress","e","target","value","code","findDOMNode","current","handleKeyPressed","ToDoList","todoList","toggleTodo","filter","ListGroup","variant","todo","isCompleted","map","Item","type","onChange","checked","concat","htmlFor","text","uuidv4","ToDoTabs","applyFilter","Nav","defaultActiveKey","onSelect","selectedKey","Link","eventKey","Badge","length","TodoModel","this","ToDoPage","useState","todos","setTodos","setFilter","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","Container","todoId","todoIndex","split","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6WAKe,SAASA,EAAT,GAAoC,IAAfC,EAAc,EAAdA,WAC5BC,EAAUC,sBAShB,OACE,qCACE,oBAAIC,UAAU,yBAAd,8BACA,eAACC,EAAA,EAAD,CAAYD,UAAU,aAAaE,KAAK,KAAxC,UACE,cAACD,EAAA,EAAWE,QAAZ,UACE,cAACF,EAAA,EAAWG,KAAZ,CAAiBC,GAAG,uBAApB,wBAEF,cAACC,EAAA,EAAD,CACEC,aAAW,QACXC,mBAAiB,uBACjBC,YAAY,eACZC,IAAKZ,EACLa,WAAY,SAACC,GAAD,OAnBpB,SAA0BA,GACpBA,EAAEC,OAAOC,OAAoB,UAAXF,EAAEG,OACtBlB,EAAWe,EAAEC,OAAOC,OACpBE,sBAAYlB,EAAQmB,SAASH,MAAQ,IAgBdI,CAAiBN,Y,0BCtB/B,SAASO,EAAT,GAAqD,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OACvD,OACE,mCACE,cAACC,EAAA,EAAD,CAAWC,QAAQ,QAAQxB,UAAU,YAArC,SACGoB,EACEE,QAAO,SAACG,GAAD,MAAsB,QAAXH,IAAqC,WAAXA,GAAuBG,EAAKC,YAAcD,EAAKC,gBAC3FC,KAAI,SAACF,GAAD,OACH,cAACF,EAAA,EAAUK,KAAX,CAAgBJ,QAAQ,OAAxB,SACE,sBAAKxB,UAAU,yBAAf,UACE,uBACEA,UAAU,mBACV6B,KAAK,WACLxB,GAAIoB,EAAKpB,GACTyB,SAAU,SAAClB,GAAD,OAAOS,EAAWT,EAAEC,OAAOR,KACrC0B,QAASN,EAAKC,cAEhB,uBAAO1B,UAAW,oBAAoBgC,OAAOP,EAAKC,YAAc,YAAc,IAAKO,QAASR,EAAKpB,GAAjG,SACGoB,EAAKS,WAVwBC,sB,0BCRjC,SAASC,EAAT,GAA8C,IAA1BhB,EAAyB,EAAzBA,SAAUiB,EAAe,EAAfA,YAC3C,OACE,qBAAKrC,UAAU,YAAf,SACE,eAACsC,EAAA,EAAD,CAAKd,QAAQ,OAAOe,iBAAiB,MAAMC,SAAU,SAACC,GAAD,OAAiBJ,EAAYI,IAAlF,UACE,cAACH,EAAA,EAAIV,KAAL,UACE,eAACU,EAAA,EAAII,KAAL,CAAUC,SAAS,MAAnB,iBACM,cAACC,EAAA,EAAD,CAAOpB,QAAQ,OAAf,SAAuBJ,EAASyB,cAGxC,cAACP,EAAA,EAAIV,KAAL,UACE,eAACU,EAAA,EAAII,KAAL,CAAUC,SAAS,SAAnB,oBACS,cAACC,EAAA,EAAD,CAAOpB,QAAQ,SAAf,SAAyBJ,EAASE,QAAO,SAACG,GAAD,OAAWA,EAAKC,eAAamB,cAGjF,cAACP,EAAA,EAAIV,KAAL,UACE,eAACU,EAAA,EAAII,KAAL,CAAUC,SAAS,YAAnB,uBACY,cAACC,EAAA,EAAD,CAAOpB,QAAQ,UAAf,SAA0BJ,EAASE,QAAO,SAACG,GAAD,OAAUA,EAAKC,eAAamB,mB,YCpBvEC,EACnB,WAAYzC,EAAI6B,EAAMR,GAAc,oBAClCqB,KAAK1C,GAAK,YAAY2B,OAAO3B,GAC7B0C,KAAKb,KAAOA,EACZa,KAAKrB,YAAcA,GCIR,SAASsB,IACtB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,MAArC,mBAAO3B,EAAP,KAAe8B,EAAf,KAuBA,OArBAC,qBAAU,WACR,IAAMH,EAAQI,KAAKC,MAAMC,aAAaC,QAAQ,UAC1CP,GACFC,EAASD,KAEV,IAEHG,qBAAU,WACRG,aAAaE,QAAQ,QAASJ,KAAKK,UAAUT,MAC5C,CAACA,IAaF,qBAAKlD,UAAU,YAAf,SACE,eAAC4D,EAAA,EAAD,WACE,qBAAK5D,UAAU,kBAAf,SACE,cAAC,EAAD,CAAWH,WAdnB,SAAoB4B,GAClB0B,EAASD,EAAMlB,OAAO,IAAIc,EAAUI,EAAML,OAAQpB,GAAM,UAepD,qBAAKzB,UAAU,iBAAf,SACE,cAAC,EAAD,CAAUoB,SAAU8B,EAAOb,YAAae,MAE1C,qBAAKpD,UAAU,iBAAf,SACE,cAAC,EAAD,CAAUoB,SAAU8B,EAAO7B,WAhBnC,SAAoBwC,GAClB,IAAMC,EAAYD,EAAOE,MAAM,KAAK,GACpCb,EAAMY,GAAWpC,aAAewB,EAAMY,GAAWpC,YACjDyB,EAAS,YAAID,KAa4C5B,OAAQA,WCrCtD,SAAS0C,IACtB,OACE,qBAAKhE,UAAU,MAAf,SACE,cAAC,EAAD,MCTN,IAYeiE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e6b0a875.chunk.js","sourcesContent":["import { createRef } from \"react\";\r\nimport { findDOMNode } from \"react-dom\";\r\nimport \"./ToDoInput.css\";\r\nimport { InputGroup, FormControl } from \"react-bootstrap\";\r\n\r\nexport default function ToDoInput({ addNewTodo }) {\r\n  const formRef = createRef();\r\n\r\n  function handleKeyPressed(e) {\r\n    if (e.target.value && e.code === \"Enter\") {\r\n      addNewTodo(e.target.value);\r\n      findDOMNode(formRef.current).value = \"\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"Todo-title text-center\">My List of ToDos</h1>\r\n      <InputGroup className=\"Todo-input\" size=\"lg\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text id=\"inputGroup-sizing-lg\">New ToDo</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl\r\n          aria-label=\"Large\"\r\n          aria-describedby=\"inputGroup-sizing-sm\"\r\n          placeholder=\"What's Next?\"\r\n          ref={formRef}\r\n          onKeyPress={(e) => handleKeyPressed(e)}\r\n        />\r\n      </InputGroup>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./ToDoList.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\n\r\nexport default function ToDoList({ todoList, toggleTodo, filter }) {\r\n  return (\r\n    <>\r\n      <ListGroup variant=\"flush\" className=\"Todo-list\">\r\n        {todoList\r\n          .filter((todo) => (filter === \"all\" ? true : filter === \"active\" ? !todo.isCompleted : todo.isCompleted))\r\n          .map((todo) => (\r\n            <ListGroup.Item variant=\"dark\" key={uuidv4()}>\r\n              <div className=\"form-check form-switch\">\r\n                <input\r\n                  className=\"form-check-input\"\r\n                  type=\"checkbox\"\r\n                  id={todo.id}\r\n                  onChange={(e) => toggleTodo(e.target.id)}\r\n                  checked={todo.isCompleted}\r\n                ></input>\r\n                <label className={\"form-check-label \".concat(todo.isCompleted ? \"completed\" : \"\")} htmlFor={todo.id}>\r\n                  {todo.text}\r\n                </label>\r\n              </div>\r\n            </ListGroup.Item>\r\n          ))}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./ToDoTabs.css\";\r\nimport { Nav, Badge } from \"react-bootstrap\";\r\n\r\nexport default function ToDoTabs({ todoList, applyFilter }) {\r\n  return (\r\n    <div className=\"Todo-tabs\">\r\n      <Nav variant=\"tabs\" defaultActiveKey=\"all\" onSelect={(selectedKey) => applyFilter(selectedKey)}>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"all\">\r\n            All <Badge variant=\"info\">{todoList.length}</Badge>\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"active\">\r\n            Active <Badge variant=\"danger\">{todoList.filter((todo) => !todo.isCompleted).length}</Badge>\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"completed\">\r\n            Completed <Badge variant=\"warning\">{todoList.filter((todo) => todo.isCompleted).length}</Badge>\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n    </div>\r\n  );\r\n}\r\n","export default class TodoModel {\r\n  constructor(id, text, isCompleted) {\r\n    this.id = \"todoItem-\".concat(id);\r\n    this.text = text;\r\n    this.isCompleted = isCompleted;\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./ToDoPage.css\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport ToDoInput from \"../../components/ToDoInput/ToDoInput\";\r\nimport ToDoList from \"../../components/ToDoList/ToDoList\";\r\nimport ToDoTabs from \"../../components/ToDoTabs/ToDoTabs\";\r\nimport TodoModel from \"../../model/TodoModel\";\r\n\r\nexport default function ToDoPage() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [filter, setFilter] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const todos = JSON.parse(localStorage.getItem(\"todos\"));\r\n    if (todos) {\r\n      setTodos(todos);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  function addNewTodo(todo) {\r\n    setTodos(todos.concat(new TodoModel(todos.length, todo, false)));\r\n  }\r\n\r\n  function toggleTodo(todoId) {\r\n    const todoIndex = todoId.split(\"-\")[1];\r\n    todos[todoIndex].isCompleted = !todos[todoIndex].isCompleted;\r\n    setTodos([...todos]);\r\n  }\r\n\r\n  return (\r\n    <div className=\"Todo-page\">\r\n      <Container>\r\n        <div className=\"Todo-page-input\">\r\n          <ToDoInput addNewTodo={addNewTodo} />\r\n        </div>\r\n        <div className=\"Todo-page-tabs\">\r\n          <ToDoTabs todoList={todos} applyFilter={setFilter} />\r\n        </div>\r\n        <div className=\"Todo-page-list\">\r\n          <ToDoList todoList={todos} toggleTodo={toggleTodo} filter={filter} />\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport ToDoPage from \"./pages/ToDoPage/ToDoPage\";\r\n// import ReactLogo from \"./components/ReactLogo/ReactLogo\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ToDoPage />\r\n      {/* <ReactLogo /> */}\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}